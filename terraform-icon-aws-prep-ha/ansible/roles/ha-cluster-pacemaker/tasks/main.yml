---
# - name: Check if cluster consist of at least 2 nodes
#   fail:
#     msg: 'Cluster must have at least 2 members'
#   when: play_hosts|count() < 2
#   run_once: true

# - name: Include distribution version specific variables - RHEL/CentOS
#   include_vars: "el{{ ansible_distribution_major_version }}.yml"
#   when: ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS'

# - name: Include distribution version specific variables - Fedora
#   include_vars: "fedora{{ ansible_distribution_major_version }}.yml"
#   when: ansible_distribution == 'Fedora'

# - name: (RHEL only) enable repositories
#   include_tasks: rhel_repos.yml
#   when: ansible_distribution == 'RedHat'

# - name: Install packages from local media
#   include_tasks: install_local_media.yml
#   when: use_local_media|bool

# - name: Install packages from system defined repositories
#   include_tasks: install_normal.yml
#   when: not use_local_media|bool

# TODO allow to choose if to use FQDN or just short hostname, defaulting to short hostname
# WARNING: the 'ansible_fqdn' is resolved from /etc/hosts file! If you change hostname
# of machine through /etc/hosts the ansible will pick it up and use it!
- name: Add hosts to /etc/hosts (using default (GW) IPv4 address)
  lineinfile:
    dest: '/etc/hosts'
    regexp: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} "
    line: >
      {{ hostvars[item]['ansible_default_ipv4']['address'] }}
      {{ hostvars[item]['ansible_fqdn'].split('.')[0] }}
  with_items: "{{ play_hosts }}"
  when: hostvars[item]['ansible_'+cluster_net_iface] is not defined
  become: yes
  become_user: root

# - name: Add hosts to /etc/hosts (using alternative interface)
#   lineinfile:
#     dest: '/etc/hosts'
#     regexp: "{{ hostvars[item]['ansible_'+cluster_net_iface]['ipv4']['address'] }} "
#     line: >
#       {{ hostvars[item]['ansible_'+cluster_net_iface]['ipv4']['address'] }}
#       {{ hostvars[item]['ansible_fqdn'].split('.')[0] }}
#   with_items: "{{ play_hosts }}"
#   when: hostvars[item]['ansible_'+cluster_net_iface] is defined

# - name: Create cluster system group
#   group:
#     name: "{{ cluster_group }}"
#     state: 'present'

- name: Create cluster system user
  user:
    name: "{{ cluster_user }}"
    state: 'present'
    password: >-
      {{ cluster_user_pass |
      password_hash('sha512', ansible_hostname|replace('-','x') |
      truncate(16, True, '', 0)) }}
    #groups: "{{ cluster_group }}"
    comment: 'HA Cluster Administrator'
  become: yes
  become_user: root
  tags:
  - test
# - name: Enable/Disable PCSD web GUI
#   lineinfile:
#     dest: '/etc/sysconfig/pcsd'
#     regexp: 'PCSD_DISABLE_GUI=.*'
#     line: "PCSD_DISABLE_GUI={{ enable_pcsd_gui|bool|ternary('false','true') }}"
#   when: enable_pcsd_gui != 'nochange'

- name: Enable and start PCSD service
  service:
    name: 'pcsd'
    enabled: true
    state: 'started'
  tags:
  - service
# - name: Authorize cluster nodes
#   pcs_auth:
#     node_name: "{{ hostvars[item]['ansible_fqdn'].split('.')[0] }}"
#     username: "{{ cluster_user }}"
#     password: "{{ cluster_user_pass }}"
#   with_items: "{{ play_hosts }}"
#   become: yes
#   become_user: root
#   run_once: true
#   tags:
#   - auth
- name: Authenticate all nodes
  command: >
    pcs cluster auth {{ ansible_play_batch | join(' ') }}
    -u {{ cluster_user }}
    -p {{ cluster_user_pass | quote }}
  run_once: true
  args:
    creates: /var/lib/pcsd/tokens
  become: yes
  become_user: root

- name: Setup message bus
  run_once: true
  command:
    pcs cluster setup --name {{ cluster_name | quote }} {ec2_a_ip} {ec2_b_ip}
  args:
    creates: /etc/corosync/corosync.conf
  become: yes
  become_user: root

- name: Start cluster services on all nodes
  service:
    name: "{{ item }}"
    state: 'started'
  with_items:
    - pacemaker
    - corosync
  become: yes
  become_user: root

- name: Enable cluster services on boot
  service:
    name: "{{ item }}"
    enabled: true
  when: cluster_enable_service|bool
  with_items:
    - pacemaker
    - corosync
  become: yes
  become_user: root
  tags:
  - enable_boot

# ### fencing setup
# - name: Setup automatic fence_xvm
#   include_tasks: fence_xvm.yml
#   when: cluster_configure_fence_xvm is defined and cluster_configure_fence_xvm|bool

# - name: Setup fence_vmware_soap
#   include_tasks: fence_vmware_soap.yml
#   when: cluster_configure_fence_vmware_soap is defined and cluster_configure_fence_vmware_soap|bool

# - name: Setup fence_kdump
#   include_tasks: fence_kdump.yml
#   when: cluster_configure_fence_kdump is defined and cluster_configure_fence_kdump|bool

# - name: Setup custom fence devices
#   include_tasks: fence_custom.yml
